Программирование дисплея теплицы
================================

Подключение дисплея
-------------------

Сам дисплей подключается через интерфейс I2C к плате расширения в блоки.

.. figure:: images/9.png
       :width: 60%
       :align: center
       :alt: Дисплей


После подачи питания на дисплей и включения дисплея, необходимо настроить контрастность при помощи отвертки поворачивая потенциометр(Рисунок 17) до четкого изображения на дисплее.

.. figure:: images/10.png
       :width: 60%
       :align: center
       :alt: Дисплей


После настройки контрастности дисплея, мы увидим выходные данные. Дисплей готов к дальнейшей работе. При помощи программного кода можно выводить на дисплей любые параметры которые необходимы.

Программирование
----------------

:: 

  #include <JsAr.h>	// Подключение библиотеки для работы с платой ESP. 
  #include <Wire.h>		// Подключение библиотеки для работы с I2C устройствами.
  #include <LiquidCrystal_I2C.h>	// Подключение библиотеки для работы с LCD-дисплеем.


  /* Создаем экземпляр класса LiquidCrystal_I2C,
  называем его lcd. Первый аргумент - адрес I2C-устройства,
  второй - количество символов в строке, третий -
  количество строк, поддерживаемое данным дисплеем.
  */
  LiquidCrystal_I2C lcd(0x27, 16, 4);

  unsigned long timerLCD = 0;	// Создаем таймер для обновления данных дисплея.

  void setup() {
    JsAr.begin();	// Начинаем работу с платой ESP. Без этой строчки ничего работать не будет!
    lcd.init();	// Инициализируем дисплей. 
    lcd.backlight();		// Включаем подсветку
    timerLCD = millis();	// Приравниваем таймер к текущему времени.
  }

  void loop() {
  /* Если разница между текущим временем и значением таймера
  отличается больше, чем на 1000 миллисекунд (1 секунда),
  то заходим внутрь условия (т.е. условие будет выполняться
  раз в секунду, не препятствуя выполнению остального кода.
  */
    if (millis() - timerLCD > 1000) {
      timerLCD = millis();	                // Присваиваем таймеру текущее время (последнего срабатывания).
      lcd.clear();	                        // Очищаем дисплей от данных.
      lcd.setCursor(0, 0);	                // Ставим курсор на позицию (символ, строка). 
      lcd.print("Applied Robotics");	    	// Выводим надпись Applied Robotics. 
      lcd.setCursor(0, 1);	                // Переносим курсор на новую строку. 
      lcd.print(timerLCD / 1000);		        // Выводим время в секундах.
    }
  }
